# This code file extracts the latent code as well as saves the SDF of the shape generated by the decoder.
import argparse
from Models.IMNET.modelAE import *
import torch
from utils import *
import numpy as np


# Assign default values to the attributes
args = argparse.Namespace()
args.epoch = 0
args.iteration = 0
args.learning_rate = 0.00005
args.beta1 = 0.5
args.dataset = "all_vox256_img"
args.checkpoint_dir = "./Models/IMNET/checkpoint"
args.data_dir = "./Models/IMNET/data/all_vox256_img/"
args.sample_dir = "./Models/IMNET/samples/"
args.sample_vox_size = 64
args.train = False
args.start = 0
args.end = 16
args.ae = True
args.svr = False
args.getz = False


model = IM_AE(args)
filename = r"Models\IMNET\checkpoint\all_vox256_img_ae_64\all_vox256_img_train_z.hdf5"
batch_z=read_hdf5(filename=filename)


model.im_network.eval()
for t in range(5):
        model_z = batch_z[t:t+1]
        model_z = torch.from_numpy(model_z)
        model_z = model_z.to(model.device).float()
        model_float = np.zeros([model.real_size+2,model.real_size+2,model.real_size+2],np.float32)
        dimc = model.cell_grid_size
        dimf = model.frame_grid_size
        
        frame_flag = np.zeros([dimf+2,dimf+2,dimf+2],np.uint8)
        queue = []
        
        frame_batch_num = int(dimf**3/model.test_point_batch_size)
        assert frame_batch_num>0
        
        #get frame grid values
        for i in range(frame_batch_num):
                point_coord = model.frame_coords[i*model.test_point_batch_size:(i+1)*model.test_point_batch_size]
                point_coord = np.expand_dims(point_coord, axis=0)
                point_coord = torch.from_numpy(point_coord)
                point_coord = point_coord.to(model.device)
                

                _, model_out_ = model.im_network(None, model_z, point_coord, is_training=False)
                model_out = model_out_.detach().cpu().numpy()[0]
                print(model_out.shape)
        # np.savez(f"data\TestingGDSolver\shape_{t}.npz",latent=batch_z[t:t+1],sdf=model_float)


